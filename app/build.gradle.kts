/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.6/userguide/building_java_projects.html
 */
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile


plugins {
    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    id("org.javamodularity.moduleplugin") version "1.8.12"
    id("org.jetbrains.kotlin.jvm") version "1.7.10"
    id("org.openjfx.javafxplugin") version "0.0.12"
    id("org.jetbrains.kotlin.plugin.serialization") version "1.6.10"
    id("org.springframework.boot") version "3.0.4"
    id("io.spring.dependency-management") version "1.1.0"
    kotlin("plugin.spring") version "1.7.10"

    // Apply the application plugin to add support for building a CLI application in Java.
    application
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    implementation(project(":shared"))
    // Use the Kotlin JUnit 5 integration.
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit5")

    // Use the JUnit 5 integration.
    testImplementation("org.junit.jupiter:junit-jupiter-engine:5.9.2")

    // This dependency is used by the application.
    implementation("com.google.guava:guava:31.1-jre")
    testImplementation("org.testfx:testfx-core:4.0.16-alpha")
    testImplementation("org.testfx:testfx-junit5:4.0.16-alpha")
    testRuntimeOnly("org.testfx:openjfx-monocle:jdk-12.0.1+2")

    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.3.2")
    implementation("org.xerial:sqlite-jdbc:3.39.3.0")
    implementation("org.jetbrains.exposed:exposed-core:0.40.1")
    implementation("org.jetbrains.exposed:exposed-dao:0.40.1")
    implementation("org.jetbrains.exposed:exposed-jdbc:0.40.1")

    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-websocket")
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin")
    implementation("org.jetbrains.kotlin:kotlin-reflect")
}

javafx {
    // version is determined by the plugin above
    version = "18.0.2"
    modules = listOf("javafx.controls", "javafx.graphics", "javafx.fxml")
}


val compileKotlin: KotlinCompile by tasks
val compileJava: JavaCompile by tasks
compileJava.destinationDirectory.set(compileKotlin.destinationDirectory)

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of("17"))
    }
}

application {
    // Define the main class for the application.
    mainClass.set("cs.project.App")
    mainModule.set("app")
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
    jvmArgs = listOf(
        "-Xmx2g",
        "-Dtestfx.robot=glass", "-Dtestfx.headless=true", "-Dprism.order=sw", "-Dprism.text=t2k",
        "--add-exports", "javafx.graphics/com.sun.glass.ui=org.testfx.monocle",
        "--add-exports", "javafx.graphics/com.sun.javafx.application=org.testfx",
        "--add-exports", "javafx.graphics/com.sun.glass.ui.delegate=org.testfx.monocle",
        "--add-opens", "javafx.graphics/com.sun.glass.ui=org.testfx"
    )
}

// Taken from: https://stackoverflow.com/questions/37173218/how-to-configure-gradle-to-output-total-number-of-tests-executed
tasks.withType<AbstractTestTask> {
    afterSuite(
        KotlinClosure2({ desc: TestDescriptor, result: TestResult ->
            // Only execute on the outermost suite
            if (desc.parent == null) {
                println(" **** Result: ${result.resultType} ****")
                println("  >    Tests: ${result.testCount}")
                println("  >   Passed: ${result.successfulTestCount}")
                println("  >   Failed: ${result.failedTestCount}")
                println("  >  Skipped: ${result.skippedTestCount}")
            }
        })
    )
}

